slick.dbs.default {
  profile ="slick.jdbc.H2Profile$"
  db {
    driver="org.h2.Driver"
    url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"
  }
}

play.evolutions.db.default.autoApply = true

play.http.secret.key="changeme"

play.i18n.langs=["en"]

play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

play.http.filters = "pl.edu.agh.msc.auth.filters.Filters"

play.modules.enabled += "pl.edu.agh.msc.auth.AuthModule"
play.modules.enabled += "pl.edu.agh.msc.ShopModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

play.filters.headers {
  contentSecurityPolicy = null
}

silhouette {
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  authenticator.httpOnlyCookie=true
  authenticator.useFingerprinting=true
  authenticator.authenticatorIdleTimeout=30 minutes
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.signer.key = "[changeme]" // A unique encryption key
  authenticator.crypter.key = "[changeme]" // A unique encryption key

  csrfStateItemHandler.cookieName="OAuth2State"
  csrfStateItemHandler.cookiePath="/"
  csrfStateItemHandler.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  csrfStateItemHandler.httpOnlyCookie=true
  csrfStateItemHandler.expirationTime=5 minutes

  csrfStateItemHandler.signer.key = "[changeme]" // A unique encryption key

}
