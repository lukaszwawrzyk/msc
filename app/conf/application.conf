slick.dbs.default {
  profile ="slick.jdbc.PostgresProfile$"
  db {
    driver="org.postgresql.Driver"
    url="jdbc:postgresql://"${?RDS_HOSTNAME}":"${?RDS_PORT}"/"${?RDS_DB_NAME},
    user=${?RDS_USERNAME},
    password=${?RDS_PASSWORD},
    numThreads=4
  }
}

akka.actor.default-dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 55
  }
}

play.evolutions.db.default.autoApply = true
play.evolutions.db.default.autocommit = false

play.http.secret.key="`>eV:HIOS9_@QULTQjKW54FkJBIhl`JngL[WQ@zqmF@kZYBtfe6@^Hu12:fGAT1]"

play.i18n.langs=["en"]

play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

play.http.filters = "pl.edu.agh.msc.auth.filters.Filters"

play.modules.enabled += "pl.edu.agh.msc.auth.AuthModule"
play.modules.enabled += "pl.edu.agh.msc.ShopModule"
play.modules.enabled += "pl.edu.agh.msc.InitModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

play.filters.headers {
  contentSecurityPolicy = null
  referrerPolicy = null
}

silhouette {
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  authenticator.httpOnlyCookie=true
  authenticator.useFingerprinting=true
  authenticator.authenticatorIdleTimeout=30 minutes
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.signer.key = "[changeme]" // A unique encryption key
  authenticator.crypter.key = "[changeme]" // A unique encryption key

}
